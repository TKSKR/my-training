def send_email(message, recipient, *, sender="university.help@gmail.com"):
  if "@" not in recipient or not recipient.endswith((".com", ".ru", ".net")) or \
     "@" not in sender or not sender.endswith((".com", ".ru", ".net")):
     print(f"Невозможно отправить письмо с адреса {sender} на адрес {recipient}")
     return # Завершаем работу функции
  if sender == recipient:
    print("Нельзя отправить письмо самому себе!")
    return # Завершаем работу функции
  if sender == "university.help@gmail.com":
    print(f"Письмо успешно отправлено с адреса {sender} на адрес {recipient}.")
  else:
    print(f"НЕСТАНДАРТНЫЙ ОТПРАВИТЕЛЬ! Письмо отправлено с адреса {sender} на адрес {recipient}.")
send_email('Это сообщение для проверки связи', 'vasyok1337@gmail.com')
send_email('Вы видите это сообщение как лучший студент курса!', 'urban.fan@mail.ru', sender='urban.info@gmail.com')
send_email('Пожалуйста, исправьте задание', 'urban.student@mail.ru', sender='urban.teacher@mail.uk')
send_email('Напоминаю самому себе о вебинаре', 'urban.teacher@mail.ru', sender='urban.teacher@mail.ru')
# Вывод на консоль:
#
# Письмо успешно отправлено с адреса university.help@gmail.com на адрес vasyok1337@gmail.com
# НЕСТАНДАРТНЫЙ ОТПРАВИТЕЛЬ! Письмо отправлено с адреса urban.info@gmail.com на адрес urban.fan@mail.ru
# Невозможно отправить письмо с адреса urban.teacher@mail.uk на адрес urban.student@mail.ru
# Нельзя отправить письмо самому себе!
# Пояснения:
#
# Функция send_email(message, recipient, *, sender="university.help@gmail.com"):
# Объявляется функция send_email с параметрами:
# message (сообщение, позиционный аргумент)
# recipient (получатель, позиционный аргумент)
# * - символ, означающий, что далее идут только именованные аргументы.
# sender (отправитель, именованный аргумент со значением по умолчанию "university.help@gmail.com").
# Проверка на корректность адресов:
# Проверяет, что recipient и sender содержат «@» и заканчиваются на .com, .ru или .net.
# Если проверка не пройдена, выводит сообщение об ошибке и возвращает управление с помощью оператора return (прерывает выполнение функции)
# Проверка на отправку самому себе:
# Проверяет, равны ли sender и recipient.
# Если равны, выводит сообщение об ошибке и завершает выполнение функции с помощью return.
# Проверка на отправителя по умолчанию:
# Проверяет, равен ли sender значению по умолчанию "university.help@gmail.com".
# Если да, выводит сообщение об успешной отправке.
# Вывод сообщения для нестандартного отправителя:
# Если предыдущие проверки не сработали, выводит сообщение о нестандартном отправителе.
# Примеры вызовов:
# Функция вызывается несколько раз с разными параметрами, демонстрируя различные варианты срабатывания проверок.
# Ключевые моменты:
#
# Именованные аргументы: используйте * для указания, что все аргументы после него должны быть именованными.
# Значение по умолчанию: у аргумента sender есть значение по умолчанию ("university.help@gmail.com"), которое используется, если аргумент не передан при вызове функции.
# Логические операторы: and, or, not используются для проверки нескольких условий одновременно.
# endswith(): Строковый метод endswith() используется для проверки, заканчивается ли строка на определённую подстроку.
# Вывод сообщений: Функция выводит сообщения на экран (в консоль) в соответствии с условиями.
# return: Используется для выхода из функции, когда проверка не пройдена.
# Этот код реализует требуемую функциональность для проверки и обработки отправки электронных писем с разными вариантами отправителя и получателя.
#
#
