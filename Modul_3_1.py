def calculate_structure_sum(data_structure): #Эта функция рекурсивно подсчитывает сумму всех чисел и длин всех строк в
    # произвольной вложенной структуре данных. Поддерживаются типы: список, кортеж, множество, словарь и строка.
    """
    Функция для подсчёта суммы всех чисел и длин всех строк в структуре данных.
    Поддерживаются вложенные списки, словари, кортежи, множества и строки.
    :param data_structure: Вложенная структура данных.
    :return: Общая сумма всех чисел и длин всех строк.
    """
    total = 0 #Инициализация переменной для хранения итоговой суммы.

    if isinstance(data_structure, (int, float)):  # Если элемент число.
        return data_structure
#Проверка, является ли текущий элемент числом (целым или с плавающей точкой). Если да, возвращается его значение.
    if isinstance(data_structure, str):  # Если элемент строка
        return len(data_structure)
#Проверка, является ли текущий элемент строкой. Если да, возвращается длина строки.
    if isinstance(data_structure, (list, tuple, set)):  # Если элемент список, кортеж или множество
        for item in data_structure: #Итерация по каждому элементу списка, кортежа или множества
            # для обработки их содержимого.
            total += calculate_structure_sum(item)
#Проверка, является ли текущий элемент списком, кортежем или множеством.
    # Если да, каждый элемент обрабатывается рекурсивно.
    if isinstance(data_structure, dict):  # Если элемент словарь
        #Проверка, является ли текущий элемент словарём. Ключи и значения обрабатываются отдельно.
        for key, value in data_structure.items():# Итерация по всем парам ключ-значение в словаре.
            total += calculate_structure_sum(key)  # Считаем ключ.
            # Рекурсивный вызов функции для подсчёта суммы или длины ключа.
            total += calculate_structure_sum(value)  # Считаем значение.
            # Рекурсивный вызов функции для подсчёта суммы или длины значения.
#
    return total #Возвращаем итоговую сумму для текущей структуры данных.

# Пример использования
data_structure = [ #Пример вложенной структуры данных, содержащей списки, словари, кортежи, строки и множества.
    [1, 2, 3],
    {'a': 4, 'b': 5},
    (6, {'cube': 7, 'drum': 8}),
    "Hello",
    ((), [{(2, 'Urban', ('Urban2', 35))}])
]

result = calculate_structure_sum(data_structure) #Вызов функции для подсчёта суммы всех чисел и длин
# всех строк в заданной структуре данных.
print(result)  # Ожидаемый результат: 99


def вычислить_сумму_структуры(структура_данных):
    """
    Функция для подсчёта суммы всех чисел и длин всех строк в структуре данных.
    Поддерживаются вложенные списки, словари, кортежи, множества и строки.
    :param структура_данных: Вложенная структура данных.
    :return: Общая сумма всех чисел и длин всех строк.
    """
    итог = 0

    if isinstance(структура_данных, (int, float)):  # Если элемент число
        return структура_данных

    if isinstance(структура_данных, str):  # Если элемент строка
        return len(структура_данных)

    if isinstance(структура_данных, (list, tuple, set)):  # Если элемент список, кортеж или множество
        for элемент in структура_данных:
            итог += вычислить_сумму_структуры(элемент)

    if isinstance(структура_данных, dict):  # Если элемент словарь
        for ключ, значение in структура_данных.items():
            итог += вычислить_сумму_структуры(ключ)  # Считаем ключ
            итог += вычислить_сумму_структуры(значение)  # Считаем значение

    return итог

# Пример использования
структура_данных = [
    [1, 2, 3],
    {'a': 4, 'b': 5},
    (6, {'cube': 7, 'drum': 8}),
    "Hello",
    ((), [{(2, 'Urban', ('Urban2', 35))}])
]

результат = вычислить_сумму_структуры(структура_данных)
print(результат)
