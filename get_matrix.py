def get_matrix(n, m, value):
    matrix = []
    for _ in range(n):
        row = []
        for _ in range(m):
            row.append(value)
        matrix.append(row)
    return matrix
result1 = get_matrix(2, 2, 10)
print(result1)
result2 = get_matrix(3, 5, 42)
print(result2)
result3 = get_matrix(4, 2, 13)
print(result3)

# Пояснение:
#
# Код представляет собой реализацию функции get_matrix(n, m, value),
# которая создаёт матрицу (список списков) с заданными размерами (n строк и m столбцов),
# заполненную указанным значением (value).
#
# Функция get_matrix(n, m, value):
# Принимает три аргумента: n — количество строк, m — количество столбцов и
# value — значение, которым нужно заполнить матрицу.

# Создает пустой список matrix.
# Внешний цикл for _ in range(n): проходится по строкам матрицы (n раз).
# Внутри внешнего цикла создается пустой список row, представляющий одну строку.
# Внутренний цикл for _ in range(m): проходится по столбцам текущей строки (m раз).
# Внутри внутреннего цикла к row добавляется значение value.
# После формирования строки row, она добавляется в список matrix.
# В конце функция возвращает matrix.
# Вызовы функции get_matrix и вывод результата:
# Функция get_matrix вызывается трижды с различными аргументами.
# Результаты вызовов (созданные матрицы) сохраняются в переменных result1, result2, result3.
# Выводятся на экран (консоль).
# Ключевые моменты: * Вложенные списки: матрица создается в виде списка списков.
# * Вложенные циклы: используются для перебора строк и столбцов матрицы. * append():
# Метод списка append() используется для добавления новых элементов (строк или значений) в
# список. * _: Использование _ в циклах, если индекс не нужен. *
# Читаемость: использование строки документации для пояснения назначения функции.
